@page "/LeaveParkhouse"


@using ParkhausKorte.Data
@inject ParkingGarage ParkingGarage

<PageTitle>Ausfahrt</PageTitle>

<style>
    .maschine{
        width: 500px;
        height: 600px;
        border: 2px solid black;
        background-color: grey;
  		padding: 40px;
    }
    .screen{
        width: 200px;
        height: 100px;
        left: 50%;
        background-color: black;
        font-size: 65px;
        color: rgb(57, 255, 20);
        text-align: center;
    }
    .buttonEinfahrtK{
        width: 200px;
        height: 100px;
        border: 2px solid black;
        @(normalParkers > 0 ? "" : "pointer-events:none;filter:brightness(0.6)");
    }
    .buttonEinfahrtD{
        width: 200px;
        height: 100px;
        border: 2px solid black;
        @(freeSeasonSpaces > 0 ? "" : "pointer-events:none;filter:brightness(0.6)");
    }
    .grid-container {
        margin-top: 60%;
        display: grid;
        grid-template-columns: auto auto;
    }
    .grid-item {
        background-color: black;
        padding: 20px;
        font-size: 30px;
        text-align: center;
    }
</style>

<h1>Ausfahrt</h1>

<div class="maschine">
    <div class="screen" style="margin-left: 100px;">@parkSpace</div>
    <div class="grid-container">
        <button class="grid-iteem buttonEinfahrtK btn btn-primary" @onclick="subtractNormalParker" >Dauerparker @normalParkers</button>
        <button class="grid-iteem buttonEinfahrtD btn btn-primary" @onclick="subtractSeasonParker">Kurzparker @freeSeasonSpaces</button>
    </div>
</div>

@code
{
    int parkingSpaces = 0;
    int freeArbitrarySpaces = 0;
    int freeSeasonSpaces = 0;
    int normalParkers = 0;
    int seasonParkers = 0;
    int parkSpace = 0;

    protected override void OnInitialized()
    {
        parkingSpaces = ParkingGarage.availableParkingSpaces;
        UpdateValues();
    }
    private void subtractNormalParker()
    {
        if (ParkingGarage.getCurrentNormalParkers() > 0)
        {
            ParkingGarage.RemoveParkerOfType(ParkerType.normal);
        }
        UpdateValues();
    }
    private void subtractSeasonParker()
    {
        if (ParkingGarage.getCurrentSeasonParkers() > 0)
        {
            ParkingGarage.RemoveParkerOfType(ParkerType.season);
        }
        UpdateValues();
    }
    private int GetFreeArbitrarySpaces() 
    {
        freeArbitrarySpaces = ParkingGarage.GetFreeSpaces();
        return freeArbitrarySpaces;
    }

    private int GetFreeSeasonSpaces() 
    {
        int reservedSeasonParkingSpaces = ParkingGarage.parkingGarageService.getReservedSeasonParkingSpaces();
        int seasonParkers = ParkingGarage.getCurrentSeasonParkers();
        if (seasonParkers < reservedSeasonParkingSpaces) {
            freeSeasonSpaces = ParkingGarage.GetFreeSpaces() + (reservedSeasonParkingSpaces - seasonParkers);
        } else {
            freeSeasonSpaces = ParkingGarage.GetFreeSpaces();
        }
        
        return freeSeasonSpaces;
    }

    private int GetNormalParkers() 
    {
        normalParkers = ParkingGarage.getCurrentNormalParkers();
        return normalParkers;
    }

    private int GetSeasonParkers() 
    {
        seasonParkers = ParkingGarage.getCurrentSeasonParkers();
        return seasonParkers;
    }
    protected void UpdateValues()
    {
        GetFreeArbitrarySpaces();
        GetFreeSeasonSpaces();
        GetNormalParkers();
        GetSeasonParkers();
        
    }
}