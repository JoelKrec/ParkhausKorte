@page "/LeaveParkhouse"


@using ParkhausKorte.Data
@inject ParkingGarage ParkingGarage

<PageTitle>Ausfahrt</PageTitle>

<h1>Ausfahrt</h1>
<h4>Parker-ID: @parkerId</h4>

<div class="maschine">
    <div class="screen">@display</div>
    <br>
    <div class="ticket-slot"></div>
    <div class="grid-container">
        <button class="grid-item btn-short-term-parker btn btn-primary @((normalParkers == 0 || parkingCost != 0) ? "btn-disabled" : "")" @onclick="subtractNormalParker">Kurzparker (@normalParkers)</button>
        <button class="grid-item btn-season-parker btn btn-primary @((seasonParkers == 0 || parkingCost != 0) ? "btn-disabled" : "")" @onclick="subtractSeasonParker">Dauerparker (@seasonParkers)</button>
    </div>
    <hr>
    <button class="grid-item btn-pay btn btn-primary @(payBtnDisabled ? "btn-disabled" : "")" @onclick="payParkingCost">Bezahlen</button>
</div>

@code
{
    int parkerId = 0;
    int parkingSpaces = 0;
    int freeArbitrarySpaces = 0;
    int freeSeasonSpaces = 0;
    int normalParkers = 0;
    int seasonParkers = 0;
    float parkingCost = 0;
    string display = "vvv Ticket vvv";
    bool payBtnDisabled = true;

    protected override void OnInitialized()
    {
        parkingSpaces = ParkingGarage.availableParkingSpaces;
        UpdateValues();
    }

    private void subtractNormalParker()
    {
        if (ParkingGarage.GetCurrentNormalParkers() > 0)
        {
            parkerId = ParkingGarage.GetRandomParkerOfType(ParkerType.normal);
            parkingCost = GetParkingCost();
        }

        display = "Parkdauer: " + ParkingGarage.GetParkingDuration(parkerId)+ " min. " +
            "Gebühr: " + parkingCost.ToString("0.00") + " €";
        payBtnDisabled = false;

        UpdateValues();
    }

    private void subtractSeasonParker()
    {
        if (ParkingGarage.GetCurrentSeasonParkers() > 0)
        {
            ParkingGarage.RemoveRandomParkerOfType(ParkerType.season);
        }
        UpdateValues();

        DisplayTemporaryMessage("Gute Fahrt!", 2000);
    }

    private async void payParkingCost() {
        ParkingGarage.RemoveParker(parkerId);

        payBtnDisabled = true;
        
        await DisplayTemporaryMessage("Gute Fahrt!", 2000);

        parkingCost = 0;
        parkerId = 0;

        UpdateValues();
        this.StateHasChanged();
    }

    private async Task DisplayTemporaryMessage(string message, int millis) {
        if (display != message) {
            display = message;

            await Task.Delay(millis);

            if (display == message) {
                display = "vvv Ticket vvv";
            }
            this.StateHasChanged();
        }
    }

    private int GetFreeArbitrarySpaces() 
    {
        freeArbitrarySpaces = ParkingGarage.GetFreeSpaces();
        return freeArbitrarySpaces;
    }

    private int GetFreeSeasonSpaces() 
    {
        int reservedSeasonParkingSpaces = ParkingGarage.parkingGarageService.getReservedSeasonParkingSpaces();
        int seasonParkers = ParkingGarage.GetCurrentSeasonParkers();
        if (seasonParkers < reservedSeasonParkingSpaces) {
            freeSeasonSpaces = ParkingGarage.GetFreeSpaces() + (reservedSeasonParkingSpaces - seasonParkers);
        } else {
            freeSeasonSpaces = ParkingGarage.GetFreeSpaces();
        }
        
        return freeSeasonSpaces;
    }

    private int GetNormalParkers() 
    {
        normalParkers = ParkingGarage.GetCurrentNormalParkers();
        return normalParkers;
    }

    private int GetSeasonParkers() 
    {
        seasonParkers = ParkingGarage.GetCurrentSeasonParkers();
        return seasonParkers;
    }

    private float GetParkingCost() 
    {
        parkingCost = ParkingGarage.GetParkingCost(parkerId);
        return parkingCost;
    }

    protected void UpdateValues()
    {
        GetFreeArbitrarySpaces();
        GetFreeSeasonSpaces();
        GetNormalParkers();
        GetSeasonParkers();
    }
}